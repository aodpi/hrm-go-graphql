// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagsGServiceClient is the client API for TagsGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagsGServiceClient interface {
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
}

type tagsGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagsGServiceClient(cc grpc.ClientConnInterface) TagsGServiceClient {
	return &tagsGServiceClient{cc}
}

func (c *tagsGServiceClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, "/TagsGService/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagsGServiceServer is the server API for TagsGService service.
// All implementations must embed UnimplementedTagsGServiceServer
// for forward compatibility
type TagsGServiceServer interface {
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	mustEmbedUnimplementedTagsGServiceServer()
}

// UnimplementedTagsGServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagsGServiceServer struct {
}

func (UnimplementedTagsGServiceServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedTagsGServiceServer) mustEmbedUnimplementedTagsGServiceServer() {}

// UnsafeTagsGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagsGServiceServer will
// result in compilation errors.
type UnsafeTagsGServiceServer interface {
	mustEmbedUnimplementedTagsGServiceServer()
}

func RegisterTagsGServiceServer(s grpc.ServiceRegistrar, srv TagsGServiceServer) {
	s.RegisterService(&TagsGService_ServiceDesc, srv)
}

func _TagsGService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsGServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TagsGService/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsGServiceServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagsGService_ServiceDesc is the grpc.ServiceDesc for TagsGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagsGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TagsGService",
	HandlerType: (*TagsGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTags",
			Handler:    _TagsGService_GetTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/tags.proto",
}
